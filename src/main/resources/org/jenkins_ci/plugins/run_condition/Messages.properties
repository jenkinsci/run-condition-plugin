#
# The MIT License
#
# Copyright (C) 2011 by Anthony Robinson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

alwaysRun.displayName=Always
neverRun.displayName=Never

statusCondition.displayName=Current build status
statusCondition.check=[Current build status] check if current [{0}] is worse or equals then [{1}] and better or equals then [{2}]
expressionCondition.displayName=Regular expression match
numericalComparison.displayName=Numerical comparison
booleanCondition.displayName=Boolean condition
booleanCondition.check=[Boolean condition] checking [{0}] against [{1}] (origin token: {2})
fileExistsCondition.displayName=File exists
fileExistsCondition.check=[File exists] check if file exists [{0}]
filesMatchCondition.displayName=Files match
stringsMatchCondition.displayName=Strings match
timeCondition.displayName=Time
dayCondition.displayName=Day of week
causeCondition.displayName=Build Cause
causeCondition.check=[Build Cause] check if build was triggered by [{0}]
nodeCondition.displayName=Execution node 
nodeCondition.check=[Execution node] check if [{0}] is in [{1}]
variableExistsCondition.displayName=Environment variable exists
variableExistsCondition.check=Variable Existence Condition: checking "{0}" variable 

logic.and.displayName=And
logic.or.displayName=Or
logic.not.displayName=Not

statusCondition.validation.worseBetterThanBest=The Worst status must be worse than or equal to the Best status
statusCondition.validation.bestWorseThanWorst=The Best status must be better than or equal to the Worst status
timeCondition.validation.invalid=The time [{0}] is not valid. Valid times are 00:00 to 23:59 e.g. 8:07 or 09:05

expressionCondition.console.args=Regular expression run condition: Expression=[{0}], Label=[{1}]
stringsMatchCondition.console.args=Strings match run condition: string 1=[{0}], string 2=[{1}]
numericalComparison.console.args=Numerical comparison: [{0}] {1} [{2}]
runner.console.exception=Exception caught evaluating condition: [{0}], action = [{1}]
filesMatchCondition.console.matched=Files match condition: Matched [{0}] files
timeCondition.console.testing=Time condition: evaluating [{0}] <= {1} <= [{2}]

statusCondition.exception.unknownResult=Unknown result name [{0}]. Valid names are SUCCESS, UNSTABLE, FAILURE, NOT_BUILT and ABORTED.

numericalComparison.lessThan=< Less than
numericalComparison.greaterThan=> Greater than
numericalComparison.equalTo=\=\= Equal to
numericalComparison.notEqualTo=!\= Not equal to
numericalComparison.lessThanOrEqualTo=<\= Less than or equal to
numericalComparison.greaterThanOrEqualTo=>\= Greater than or equal to

dayCondition.weekend.displayName=Weekends
dayCondition.weekday.displayName=Weekdays
dayCondition.selectDays.displayName=Select days

runner.fail.displayName=Fail the build
runner.unstable.displayName=Mark the build unstable
runner.runUnstable.displayName=Run and mark the build unstable
runner.run.displayName=Run
runner.dontRun.displayName=Don''t run

runner.stage.prebuild=prebuild
runner.stage.perform=perform

runner.condition.false=Run condition [{0}] preventing {1} for step [{2}]
runner.condition.true=Run condition [{0}] enabling {1} for step [{2}]